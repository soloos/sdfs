// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package solofsprotocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NetINodeInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsNetINodeInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *NetINodeInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NetINodeInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NetINodeInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NetINodeInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NetINodeInfoResponse) CommonResponse(obj *CommonResponse) *CommonResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *NetINodeInfoResponse) Size() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoResponse) MutateSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *NetINodeInfoResponse) NetBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoResponse) MutateNetBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *NetINodeInfoResponse) MemBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoResponse) MutateMemBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func NetINodeInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NetINodeInfoResponseAddCommonResponse(builder *flatbuffers.Builder, CommonResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(CommonResponse), 0)
}
func NetINodeInfoResponseAddSize(builder *flatbuffers.Builder, Size uint64) {
	builder.PrependUint64Slot(1, Size, 0)
}
func NetINodeInfoResponseAddNetBlockCap(builder *flatbuffers.Builder, NetBlockCap int32) {
	builder.PrependInt32Slot(2, NetBlockCap, 0)
}
func NetINodeInfoResponseAddMemBlockCap(builder *flatbuffers.Builder, MemBlockCap int32) {
	builder.PrependInt32Slot(3, MemBlockCap, 0)
}
func NetINodeInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
