memstg/posixfs_blockplacement.go:	uNetINode, err = p.MemStg.NetINodeDriver.GetNetINode(netINodeID)
memstg/posixfs_blockplacement.go:	defer p.MemStg.NetINodeDriver.ReleaseNetINode(uNetINode)
memstg/posixfs_dir.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(ino)
memstg/posixfs_dir.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_dir.go:	err = p.FsINodeDriver.helper.ListFsINodeByParentIDFromDB(p.NameSpaceID, uFsINode.Ptr().Meta.Ino,
memstg/posixfs_dir.go:	uOldFsINode, err = p.FsINodeDriver.GetFsINodeByName(oldDirFsINodeID, oldName)
memstg/posixfs_dir.go:	defer p.FsINodeDriver.ReleaseFsINode(uOldFsINode)
memstg/posixfs_dir.go:	uCheckFsINode, err = p.FsINodeDriver.GetFsINodeByName(newDirFsINodeID, newName)
memstg/posixfs_dir.go:	defer p.FsINodeDriver.ReleaseFsINode(uCheckFsINode)
memstg/posixfs_dir.go:				isDirEmpty, err = p.checkIsDirEmpty(&pCheckFsINode.Meta)
memstg/posixfs_dir.go:				err = p.FsINodeDriver.UnlinkFsINode(pCheckFsINode.Meta.Ino)
memstg/posixfs_dir.go:			err = p.FsINodeDriver.UnlinkFsINode(pCheckFsINode.Meta.Ino)
memstg/posixfs_dir.go:	err = p.FsINodeDriver.UpdateFsINode(&pOldFsINode.Meta)
memstg/posixfs_dir.go:	p.FsINodeDriver.CleanFsINodeAssitCache(oldDirFsINodeID, oldName)
memstg/posixfs_dir.go:		code = p.SimpleMkdir(&fsINodeMeta, nil, parentID, perms, paths[i], uid, gid, solofstypes.FS_RDEV)
memstg/posixfs_dir.go:	code = p.SimpleMkdir(&fsINodeMeta, nil, input.NodeId, input.Mode, name, input.Uid, input.Gid, solofstypes.FS_RDEV)
memstg/posixfs_dir.go:	p.SetFsEntryOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_dir.go:	err = p.RefreshFsINodeACMtimeByIno(fsINodeMeta.ParentID)
memstg/posixfs_dir.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByName(parentID, name)
memstg/posixfs_dir.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_dir.go:	err = p.createFsINode(pFsINodeMeta,
memstg/posixfs_dir.go:	err = p.ListFsINodeByIno(pFsINodeMeta.Ino, false,
memstg/posixfs_dir.go:	err = p.FetchFsINodeByName(&fsINodeMeta, header.NodeId, name)
memstg/posixfs_dir.go:	isDirEmpty, err = p.checkIsDirEmpty(&fsINodeMeta)
memstg/posixfs_dir.go:	err = p.FsINodeDriver.UnlinkFsINode(fsINodeMeta.Ino)
memstg/posixfs_dir.go:	err = p.RefreshFsINodeACMtimeByIno(header.NodeId)
memstg/posixfs_dir.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, input.NodeId)
memstg/posixfs_dir.go:	err = p.SimpleOpen(&fsINodeMeta, input.Flags, out)
memstg/posixfs_dir.go:	err = p.ListFsINodeByIno(input.NodeId, false,
memstg/posixfs_dir.go:				err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMetaByIDThroughHardLink, fsINodeMeta.Ino)
memstg/posixfs_dir.go:	err = p.ListFsINodeByIno(input.NodeId, true,
memstg/posixfs_dir.go:			err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMetaByIDThroughHardLink, fsINodeMeta.Ino)
memstg/posixfs_dir.go:			p.SetFsEntryOutByFsINode(entryOut, &fsINodeMetaByIDThroughHardLink)
memstg/posixfs_dir.go:	p.FdTable.ReleaseFd(input.Fh)
memstg/posixfs_fdtable.go:	return p.FdTable.AllocFd(fsINodeID)
memstg/posixfs_fdtable.go:	return p.FdTable.GetFd(fdID)
memstg/posixfs_fdtable.go:	p.FdTable.FdAddAppendPosition(fdID, delta)
memstg/posixfs_fdtable.go:	p.FdTable.FdAddReadPosition(fdID, delta)
memstg/posixfs_file.go:		err = p.FetchFsINodeByName(&fsINodeMeta, parentID, paths[i])
memstg/posixfs_file.go:	err = p.FetchFsINodeByName(&fsINodeMeta, parentID, paths[i])
memstg/posixfs_file.go:		err = p.createFsINode(&fsINodeMeta,
memstg/posixfs_file.go:	err = p.createFsINode(&fsINodeMeta,
memstg/posixfs_file.go:	err = p.SimpleOpen(&fsINodeMeta, input.Flags, &out.OpenOut)
memstg/posixfs_file.go:	err = p.RefreshFsINodeACMtimeByIno(fsINodeMeta.ParentID)
memstg/posixfs_file.go:	p.SetFsEntryOutByFsINode(&out.EntryOut, &fsINodeMeta)
memstg/posixfs_file.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(input.NodeId)
memstg/posixfs_file.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_file.go:	err = p.SimpleOpen(&uFsINode.Ptr().Meta, input.Flags, out)
memstg/posixfs_file.go:		err = p.FsINodeDriver.RefreshFsINodeACMtime(uFsINode)
memstg/posixfs_file_read.go:	return buf[:p.dataLen], fsapitypes.OK
memstg/posixfs_file_read.go:	return p.dataLen
memstg/posixfs_file_read.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(fsINodeID)
memstg/posixfs_file_read.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_file_read.go:	return p.MemStg.NetINodeDriver.PReadWithMem(uFsINode.Ptr().UNetINode, data, offset)
memstg/posixfs_file_read.go:	ret.dataLen, err = p.SimpleReadWithMem(input.NodeId, buf[:input.Size], input.Offset)
memstg/posixfs_file_sync.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(fsINodeID)
memstg/posixfs_file_sync.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_file_sync.go:		err = p.MemStg.NetINodeDriver.Sync(pFsINode.UNetINode)
memstg/posixfs_file_sync.go:	var err = p.SimpleFlush(input.NodeId)
memstg/posixfs_file_write.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(fsINodeID)
memstg/posixfs_file_write.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_file_write.go:	return p.MemStg.NetINodeDriver.PWriteWithMem(pFsINode.UNetINode, data, offset)
memstg/posixfs_file_write.go:	err = p.SimpleWriteWithMem(input.NodeId, data[:input.Size], input.Offset)
memstg/posixfs_fs.go:	capacity, files := p.StatLimits()
memstg/posixfs_fs.go:	blksize := p.BlkSize()
memstg/posixfs_fsinode.go:	return p.FsINodeDriver.GetFsINodeByID(fsINodeID)
memstg/posixfs_fsinode.go:	p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs.go:	p.SoloosEnv = soloosEnv
memstg/posixfs.go:	p.NameSpaceID = nsID
memstg/posixfs.go:	p.MemStg = memStg
memstg/posixfs.go:	err = p.FsINodeDriver.Init(p.SoloosEnv,
memstg/posixfs.go:	err = p.FIXAttrDriver.Init(
memstg/posixfs.go:	err = p.FdTable.Init()
memstg/posixfs.go:	err = p.FsMutexDriver.Init(p.SoloosEnv, p)
memstg/posixfs_inode_attr_darwin.go:		var uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(pFsINodeMeta.Ino)
memstg/posixfs_inode_attr_darwin.go:		defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inode_attr.go:	fsEntryOut.EntryValid = p.FsINodeDriver.EntryAttrValid
memstg/posixfs_inode_attr.go:	fsEntryOut.EntryValidNsec = p.FsINodeDriver.EntryAttrValidNsec
memstg/posixfs_inode_attr.go:	fsEntryOut.AttrValid = p.FsINodeDriver.EntryAttrValid
memstg/posixfs_inode_attr.go:	fsEntryOut.AttrValidNsec = p.FsINodeDriver.EntryAttrValidNsec
memstg/posixfs_inode_attr.go:	p.SetFsAttrByFsINode(&fsEntryOut.Attr, pFsINodeMeta)
memstg/posixfs_inode_attr.go:		var err = p.TruncateINode(pFsINodeMeta, input.Size)
memstg/posixfs_inode_attr.go:	now := p.FsINodeDriver.Timer.Now()
memstg/posixfs_inode_attr.go:	fsAttrOut.AttrValid = p.FsINodeDriver.EntryAttrValid
memstg/posixfs_inode_attr.go:	fsAttrOut.AttrValidNsec = p.FsINodeDriver.EntryAttrValidNsec
memstg/posixfs_inode_attr.go:	p.SetFsAttrByFsINode(&fsAttrOut.Attr, pFsINodeMeta)
memstg/posixfs_inode_attr.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, input.NodeId)
memstg/posixfs_inode_attr.go:	p.SetFsAttrOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_inode_attr.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, input.NodeId)
memstg/posixfs_inode_attr.go:	code = p.SetFsINodeByFsAttr(&fsINodeMeta, input)
memstg/posixfs_inode_attr.go:	err = p.FsINodeDriver.UpdateFsINode(&fsINodeMeta)
memstg/posixfs_inode_attr.go:	p.SetFsAttrOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_inode_attr_linux.go:		var uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(pFsINodeMeta.Ino)
memstg/posixfs_inode_attr_linux.go:		defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inodebypath.go:	err = p.FetchFsINodeByPath(&fsINodeMeta, fsINodePath)
memstg/posixfs_inodebypath.go:	err = p.FsINodeDriver.UnlinkFsINode(fsINodeMeta.Ino)
memstg/posixfs_inodebypath.go:	err = p.FetchFsINodeByPath(&oldFsINodeMeta, oldFsINodeName)
memstg/posixfs_inodebypath.go:	err = p.FetchFsINodeByPath(&parentFsINodeMeta, tmpParentDirPath)
memstg/posixfs_inodebypath.go:	err = p.FetchFsINodeByPath(&tmpFsINodeMeta, newFsINodePath)
memstg/posixfs_inodebypath.go:	err = p.FsINodeDriver.UpdateFsINode(&fsINodeMeta)
memstg/posixfs_inodebypath.go:	p.FsINodeDriver.CleanFsINodeAssitCache(oldFsINodeMeta.ParentID, oldFsINodeMeta.Name())
memstg/posixfs_inodebypath.go:	err = p.FetchFsINodeByPath(&fsINodeMeta, parentPath)
memstg/posixfs_inodebypath.go:	err = p.FsINodeDriver.helper.ListFsINodeByParentIDFromDB(p.NameSpaceID,
memstg/posixfs_inodebypath.go:		*fsINodeMeta = p.FsINodeDriver.RootFsINode.Ptr().Meta
memstg/posixfs_inodebypath.go:		err = p.FetchFsINodeByName(fsINodeMeta, parentID, paths[i])
memstg/posixfs_inode.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByID(fsINodeID)
memstg/posixfs_inode.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inode.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByName(parentID, fsINodeName)
memstg/posixfs_inode.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inode.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByIDThroughHardLink(fsINodeID)
memstg/posixfs_inode.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inode.go:	err = p.FsINodeDriver.PrepareFsINodeForCreate(pFsINodeMeta,
memstg/posixfs_inode.go:	err = p.FsINodeDriver.CreateFsINode(pFsINodeMeta)
memstg/posixfs_inode.go:	out.Fh = p.FdTable.AllocFd(fsINodeMeta.Ino)
memstg/posixfs_inode.go:	err = p.FetchFsINodeByIDThroughHardLink(&parentFsINodeMeta, input.NodeId)
memstg/posixfs_inode.go:	err = p.createFsINode(&fsINodeMeta,
memstg/posixfs_inode.go:	err = p.RefreshFsINodeACMtimeByIno(input.NodeId)
memstg/posixfs_inode.go:	p.SetFsEntryOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_inode.go:	err = p.FetchFsINodeByName(&fsINodeMeta, header.NodeId, name)
memstg/posixfs_inode.go:	err = p.FsINodeDriver.UnlinkFsINode(fsINodeMeta.Ino)
memstg/posixfs_inode.go:	err = p.RefreshFsINodeACMtimeByIno(header.NodeId)
memstg/posixfs_inode.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, input.NodeId)
memstg/posixfs_inode.go:	err = p.FetchFsINodeByName(&fsINodeMeta, header.NodeId, name)
memstg/posixfs_inode.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, fsINodeMeta.Ino)
memstg/posixfs_inode.go:	p.SetFsEntryOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_inode.go:	return p.FsINodeDriver.RefreshFsINodeACMtimeByIno(fsINodeID)
memstg/posixfs_inode.go:	uFsINode, err = p.FsINodeDriver.GetFsINodeByID(pFsINode.Ino)
memstg/posixfs_inode.go:	defer p.FsINodeDriver.ReleaseFsINode(uFsINode)
memstg/posixfs_inode.go:	return p.MemStg.NetINodeDriver.NetINodeTruncate(uFsINode.Ptr().UNetINode, size)
memstg/posixfs_inode_link.go:	err = p.FsINodeDriver.Link(srcFsINodeID, newFsINodeParentID, filename, &newFsINodeMeta)
memstg/posixfs_inode_link.go:	err = p.FetchFsINodeByIDThroughHardLink(&newFsINodeMeta, newFsINodeMeta.Ino)
memstg/posixfs_inode_link.go:	err = p.FetchFsINodeByID(&srcFsINodeMeta, srcFsINodeID)
memstg/posixfs_inode_link.go:	err = p.RefreshFsINodeACMtimeByIno(srcFsINodeMeta.ParentID)
memstg/posixfs_inode_link.go:	p.SetFsEntryOutByFsINode(out, &newFsINodeMeta)
memstg/posixfs_inode_link.go:	err = p.FsINodeDriver.Symlink(header.NodeId, pointedTo, linkName, &fsINodeMeta)
memstg/posixfs_inode_link.go:	err = p.RefreshFsINodeACMtimeByIno(header.NodeId)
memstg/posixfs_inode_link.go:	p.SetFsEntryOutByFsINode(out, &fsINodeMeta)
memstg/posixfs_inode_link.go:	out, err = p.FsINodeDriver.Readlink(header.NodeId)
memstg/posixfs_inode_lock.go:	err = p.FsMutexDriver.GetLk(input.NodeId, &meta)
memstg/posixfs_inode_lock.go:	p.setLKOutByMeta(out, &meta)
memstg/posixfs_inode_lock.go:	p.setMetaByLKIn(input, &meta)
memstg/posixfs_inode_lock.go:	err = p.FsMutexDriver.SetLk(input.NodeId, &meta)
memstg/posixfs_inode_lock.go:	p.setMetaByLKIn(input, &meta)
memstg/posixfs_inode_lock.go:	err = p.FsMutexDriver.SetLkw(input.NodeId, &meta)
memstg/posixfs_inode_xattr.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, fsINodeID)
memstg/posixfs_inode_xattr.go:	sz, err = p.FIXAttrDriver.GetXAttrSize(fsINodeMeta.Ino, attr)
memstg/posixfs_inode_xattr.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, fsINodeID)
memstg/posixfs_inode_xattr.go:	data, err = p.FIXAttrDriver.GetXAttrData(fsINodeMeta.Ino, attr)
memstg/posixfs_inode_xattr.go:	err = p.FetchFsINodeByIDThroughHardLink(&fsINodeMeta, fsINodeID)
memstg/posixfs_inode_xattr.go:	data, err = p.FIXAttrDriver.ListXAttr(fsINodeMeta.Ino)
memstg/posixfs_inode_xattr.go:	err = p.FIXAttrDriver.SetXAttr(fsINodeID, attr, data)
memstg/posixfs_inode_xattr.go:	err = p.FIXAttrDriver.RemoveXAttr(fsINodeID, attr)
memstg/posixfs_memblock.go:	return p.MemStg.MemBlockDriver.MustGetMemBlockWithReadAcquire(uNetINode, memBlockIndex)
memstg/posixfs_memblock.go:	p.MemStg.MemBlockDriver.ReleaseMemBlockWithReadRelease(uMemBlock)
memstg/posixfs_netblock.go:	return p.MemStg.NetBlockDriver.MustGetNetBlock(uNetINode, netBlockIndex)
memstg/posixfs_netblock.go:	p.MemStg.NetBlockDriver.ReleaseNetBlock(uNetBlock)
memstg/posixfs_netblock.go:	p.MemStg.netBlockDriver.SetPReadMemBlockWithDisk(preadWithDisk)
memstg/posixfs_netblock.go:	p.MemStg.netBlockDriver.SetUploadMemBlockWithDisk(uploadMemBlockWithDisk)
memstg/posixfs_netinode.go:	return p.MemStg.NetINodeDriver.GetNetINode(netINodeID)
memstg/posixfs_netinode.go:	p.MemStg.NetINodeDriver.ReleaseNetINode(uNetINode)
memstg/posixfs_netinode.go:	return p.MemStg.NetINodeDriver.PWriteWithNetQuery(uNetINode, netQuery, dataLength, offset)
memstg/posixfs_netinode.go:	return p.MemStg.NetINodeDriver.PWriteWithMem(uNetINode, data, offset)
