// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sdfsprotocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NetINodeNetBlockInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsNetINodeNetBlockInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *NetINodeNetBlockInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NetINodeNetBlockInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NetINodeNetBlockInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NetINodeNetBlockInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NetINodeNetBlockInfoRequest) NetINodeID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NetINodeNetBlockInfoRequest) NetBlockIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeNetBlockInfoRequest) MutateNetBlockIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *NetINodeNetBlockInfoRequest) Cap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeNetBlockInfoRequest) MutateCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func NetINodeNetBlockInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NetINodeNetBlockInfoRequestAddNetINodeID(builder *flatbuffers.Builder, NetINodeID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NetINodeID), 0)
}
func NetINodeNetBlockInfoRequestAddNetBlockIndex(builder *flatbuffers.Builder, NetBlockIndex int32) {
	builder.PrependInt32Slot(1, NetBlockIndex, 0)
}
func NetINodeNetBlockInfoRequestAddCap(builder *flatbuffers.Builder, Cap int32) {
	builder.PrependInt32Slot(2, Cap, 0)
}
func NetINodeNetBlockInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
