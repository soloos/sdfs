// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sdfsprotocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NetINodePWriteRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsNetINodePWriteRequest(buf []byte, offset flatbuffers.UOffsetT) *NetINodePWriteRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NetINodePWriteRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NetINodePWriteRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NetINodePWriteRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NetINodePWriteRequest) NetINodeID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NetINodePWriteRequest) Offset() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodePWriteRequest) MutateOffset(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *NetINodePWriteRequest) Length() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodePWriteRequest) MutateLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *NetINodePWriteRequest) TransferBackends(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NetINodePWriteRequest) TransferBackendsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NetINodePWriteRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NetINodePWriteRequestAddNetINodeID(builder *flatbuffers.Builder, NetINodeID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NetINodeID), 0)
}
func NetINodePWriteRequestAddOffset(builder *flatbuffers.Builder, Offset uint64) {
	builder.PrependUint64Slot(1, Offset, 0)
}
func NetINodePWriteRequestAddLength(builder *flatbuffers.Builder, Length int32) {
	builder.PrependInt32Slot(2, Length, 0)
}
func NetINodePWriteRequestAddTransferBackends(builder *flatbuffers.Builder, TransferBackends flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(TransferBackends), 0)
}
func NetINodePWriteRequestStartTransferBackendsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NetINodePWriteRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
