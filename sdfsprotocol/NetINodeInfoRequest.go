// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sdfsprotocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NetINodeInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsNetINodeInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *NetINodeInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NetINodeInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NetINodeInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NetINodeInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NetINodeInfoRequest) NetINodeID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NetINodeInfoRequest) Size() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoRequest) MutateSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *NetINodeInfoRequest) NetBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoRequest) MutateNetBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *NetINodeInfoRequest) MemBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetINodeInfoRequest) MutateMemBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func NetINodeInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NetINodeInfoRequestAddNetINodeID(builder *flatbuffers.Builder, NetINodeID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NetINodeID), 0)
}
func NetINodeInfoRequestAddSize(builder *flatbuffers.Builder, Size uint64) {
	builder.PrependUint64Slot(1, Size, 0)
}
func NetINodeInfoRequestAddNetBlockCap(builder *flatbuffers.Builder, NetBlockCap int32) {
	builder.PrependInt32Slot(2, NetBlockCap, 0)
}
func NetINodeInfoRequestAddMemBlockCap(builder *flatbuffers.Builder, MemBlockCap int32) {
	builder.PrependInt32Slot(3, MemBlockCap, 0)
}
func NetINodeInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
